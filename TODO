MatrixCrypt TODOs

Write
 * mcrypt

 * function to generate a sha 512 hash for password hashing
  [done] sha512.cpp has been written which takes care of this

 * mops - write the actual matrix encryption code
  [done] needs to be able to work with streams
  [    ] option to calculate the hashsum of the given password
  [    ] needs to have the same methods as ascii86 and deflate

 * tests - write or expand tests for all code involved
  [    ] every single part of the public API needs to have tests
  [    ] use the samples in the file SAMPLES to test mops.cpp 
         for possible faults. 

 * documentation - people should easily be able to use this code,
   which is why I need to make sure it's well documented
  [    ] add class comments for every significant class
  [    ] add method comments in the header files, at least 
         for the public API
  [    ] add file comments describing what the file does


Bugfixes
 * change the constructors of all classes to be           [done]
   explicit where appropriate
 * use the namespace "cmc" instead of "cme" because this  [done]
   library also does decryption (not only encryption)
 * deflate - make use of total_out in write() and close() [done but no improvement]
 * remove all debugging code from libraries that work     []
 * change the code to use size_t where appropriate        []
 * test why the encrypted version of "roro" with the      []
   pass "." isn't the same in the ruby version and the 
   C++ version of MatrixCrypt


Algorithm Improvements
 * use the identity matrix when an empty password is      [done but not documented]
   specified
 * think about adding more diffusion to the password...   [in progress (phash.cpp)]
   possibly use XOR 8 chars in advance?
 * work on an improved avalance effect for additional     []
   crpytographic strength... XOR, hashes, etc.?
 * use lrot or rrot for extra cryptographic security      []
 * instead of the current block cipher operation mode,    []
   the electronic codebook mode, switch to using cipher
   block chaining. this means that output depends of 
   previous output and an option for an IV needs to be
   added. 
